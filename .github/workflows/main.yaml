#name: Build & Deploy Microservices App
#
#on:
#  push:
#    branches:
#      - main
#jobs:
#  build-deploy:
#    name: Build & Deploy Spring boot Microservice App
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v4
#
#      - name: Setup JDK 17
#        uses: actions/setup-java@v3
#        with:
#          distribution: 'corretto'
#          java-version: 17
#
#      - name: Test & Build All Services
#        run: |
#          for service in config-server discovery gateway ordre partie-prenante produit production; do
#            echo "Building $service"
#            mvn -B test --file ./gpao-tex-core/$service/pom.xml
#            mvn clean package -DskipTests --file ./gpao-tex-core/$service/pom.xml
#          done
#
#      - name: Log in to Docker Hub
#        uses: docker/login-action@v2
#        with:
#          username: ${{ secrets.DOCKER_USERNAME }}
#          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN}}
#
#
#      - name: Build Docker images
#        run: |
#          docker build -t ${{ secrets.DOCKER_USERNAME }}/gpro-config-service:latest ./gpao-tex-core/config-server
#          docker build -t ${{ secrets.DOCKER_USERNAME }}/gpro-discovery-service:latest ./gpao-tex-core/discovery
#          docker build -t ${{ secrets.DOCKER_USERNAME }}/gpro-gateway-service:latest ./gpao-tex-core/gateway          
#          docker build -t ${{ secrets.DOCKER_USERNAME }}/gpro-ordre-service:latest ./gpao-tex-core/ordre
#          docker build -t ${{ secrets.DOCKER_USERNAME }}/gpro-produit-service:latest ./gpao-tex-core/produit
#          docker build -t ${{ secrets.DOCKER_USERNAME }}/gpro-production-service:latest ./gpao-tex-core/production
#          docker build -t ${{ secrets.DOCKER_USERNAME }}/gpro-partie-prenante-service:latest ./gpao-tex-core/partie-prenante
#
#      - name: Push Docker images
#        run: |
#          docker push ${{ secrets.DOCKER_USERNAME }}/gpro-config-service:latest
#          docker push ${{ secrets.DOCKER_USERNAME }}/gpro-discovery-service:latest
#          docker push ${{ secrets.DOCKER_USERNAME }}/gpro-gateway-service:latest
#          docker push ${{ secrets.DOCKER_USERNAME }}/gpro-ordre-service:latest
#          docker push ${{ secrets.DOCKER_USERNAME }}/gpro-produit-service:latest
#          docker push ${{ secrets.DOCKER_USERNAME }}/gpro-production-service:latest
#          docker push ${{ secrets.DOCKER_USERNAME }}/gpro-partie-prenante-service:latest
#



name: Build & Deploy Microservices App

on:
  push:
    branches:
      - main
    paths:
      - 'gpao-tex-core/config-server/**'
      - 'gpao-tex-core/discovery/**'
      - 'gpao-tex-core/gateway/**'
      - 'gpao-tex-core/ordre/**'
      - 'gpao-tex-core/produit/**'
      - 'gpao-tex-core/production/**'
      - 'gpao-tex-core/partie-prenante/**'
      - '.github/workflows/**'

jobs:
  build-deploy:
    name: Build & Deploy Spring Boot Microservice App
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'corretto'
          java-version: 17

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN}}

      # Debugging step to print the latest commit message and changed files
      - name: Debugging Information
        run: |
          echo "Latest commit message: ${{ github.event.head_commit.message }}"
          echo "Changed files:"
          git diff --name-only HEAD^ HEAD

      # Build and deploy for each service only if changes are detected
      - name: Config Server - Test, Build JAR, Build Docker Image, Push
        if: ${{ github.event_name == 'push' && github.event.head_commit.message != null && contains(github.event.head_commit.message, 'config-server') }}
        run: |
          cd gpao-tex-core/config-server
          ./mvnw clean test
          ./mvnw package -DskipTests
          docker build -t ${{ secrets.DOCKER_USERNAME }}/gpro-config-service:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/gpro-config-service:latest

      - name: Discovery Service - Test, Build JAR, Build Docker Image, Push
        if: ${{ github.event_name == 'push' && github.event.head_commit.message != null && contains(github.event.head_commit.message, 'discovery') }}
        run: |
          cd gpao-tex-core/discovery
          ./mvnw clean test
          ./mvnw package -DskipTests
          docker build -t ${{ secrets.DOCKER_USERNAME }}/gpro-discovery-service:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/gpro-discovery-service:latest

      - name: Gateway - Test, Build JAR, Build Docker Image, Push
        if: ${{ github.event_name == 'push' && github.event.head_commit.message != null && contains(github.event.head_commit.message, 'gateway') }}
        run: |
          cd gpao-tex-core/gateway
          ./mvnw clean test
          ./mvnw package -DskipTests
          docker build -t ${{ secrets.DOCKER_USERNAME }}/gpro-gateway-service:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/gpro-gateway-service:latest

      - name: Ordre Service - Test, Build JAR, Build Docker Image, Push
        if: ${{ github.event_name == 'push' && github.event.head_commit.message != null && contains(github.event.head_commit.message, 'ordre') }}
        run: |
          cd gpao-tex-core/ordre
          ./mvnw clean test
          ./mvnw package -DskipTests
          docker build -t ${{ secrets.DOCKER_USERNAME }}/gpro-ordre-service:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/gpro-ordre-service:latest

      - name: Produit Service - Test, Build JAR, Build Docker Image, Push
        if: ${{ github.event_name == 'push' && github.event.head_commit.message != null && contains(github.event.head_commit.message, 'produit') }}
        run: |
          cd gpao-tex-core/produit
          ./mvnw clean test
          ./mvnw package -DskipTests
          docker build -t ${{ secrets.DOCKER_USERNAME }}/gpro-produit-service:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/gpro-produit-service:latest

      - name: Production Service - Test, Build JAR, Build Docker Image, Push
        if: ${{ github.event_name == 'push' && github.event.head_commit.message != null && contains(github.event.head_commit.message, 'production') }}
        run: |
          cd gpao-tex-core/production
          ./mvnw clean test
          ./mvnw package -DskipTests
          docker build -t ${{ secrets.DOCKER_USERNAME }}/gpro-production-service:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/gpro-production-service:latest

      - name: Partie Prenante Service - Test, Build JAR, Build Docker Image, Push
        if: ${{ github.event_name == 'push' && github.event.head_commit.message != null && contains(github.event.head_commit.message, 'partie-prenante') }}
        run: |
          cd gpao-tex-core/partie-prenante
          ./mvnw clean test
          ./mvnw package -DskipTests
          docker build -t ${{ secrets.DOCKER_USERNAME }}/gpro-partie-prenante-service:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/gpro-partie-prenante-service:latest
