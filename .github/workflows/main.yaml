name: Build & Deploy Microservices App
on:
  push:
    branches:
      - main
    paths:
      - 'gpao-tex-core/**'
      - '.github/workflows/**'

jobs:
  build-deploy:
    name: Build & Deploy Spring Boot Microservice App
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'corretto'
          java-version: 17

      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Determine changed services
        id: changes
        run: |
          echo "Changed services:"
          if [ $(git rev-list --count HEAD) -gt 1 ]; then
            services=$(git diff --name-only HEAD^ HEAD | grep -Eo '^gpao-tex-core/[^/]+/' | sort | uniq)
          else
            echo "First commit or no previous commit to diff against."
            services="gpao-tex-core/*/"
          fi
          echo "$services"
          echo "::set-output name=services::$services"

      # Dynamic build and deploy steps based on detected changes
      - name: Unit Tests, Build Jar, and Push Docker Images
        run: |
          for service in ${{ steps.changes.outputs.services }}; do
            echo "Processing $service"
            cd gpao-tex-core/$service
            mvn -B test --file pom.xml
            mvn clean package -DskipTests --file pom.xml
            docker build -t ${{ secrets.DOCKER_USERNAME }}/gpro-${service}-service:latest .
            docker push ${{ secrets.DOCKER_USERNAME }}/gpro-${service}-service:latest
          done
      - name: Build and analyze
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=DevSecOps -Dsonar.projectName='DevSecOps'