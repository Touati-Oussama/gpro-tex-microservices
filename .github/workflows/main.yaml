#name: Build & Deploy Microservices App
#
#on:
#  push:
#    branches:
#      - main
#jobs:
#  build-deploy:
#    name: Build & Deploy Spring boot Microservice App
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v4
#
#      - name: Setup JDK 17
#        uses: actions/setup-java@v3
#        with:
#          distribution: 'corretto'
#          java-version: 17
#
#      - name: Test & Build All Services
#        run: |
#          for service in config-server discovery gateway ordre partie-prenante produit production; do
#            echo "Building $service"
#            mvn -B test --file ./gpao-tex-core/$service/pom.xml
#            mvn clean package -DskipTests --file ./gpao-tex-core/$service/pom.xml
#          done
#
#      - name: Log in to Docker Hub
#        uses: docker/login-action@v2
#        with:
#          username: ${{ secrets.DOCKER_USERNAME }}
#          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN}}
#
#
#      - name: Build Docker images
#        run: |
#          docker build -t ${{ secrets.DOCKER_USERNAME }}/gpro-config-service:latest ./gpao-tex-core/config-server
#          docker build -t ${{ secrets.DOCKER_USERNAME }}/gpro-discovery-service:latest ./gpao-tex-core/discovery
#          docker build -t ${{ secrets.DOCKER_USERNAME }}/gpro-gateway-service:latest ./gpao-tex-core/gateway          
#          docker build -t ${{ secrets.DOCKER_USERNAME }}/gpro-ordre-service:latest ./gpao-tex-core/ordre
#          docker build -t ${{ secrets.DOCKER_USERNAME }}/gpro-produit-service:latest ./gpao-tex-core/produit
#          docker build -t ${{ secrets.DOCKER_USERNAME }}/gpro-production-service:latest ./gpao-tex-core/production
#          docker build -t ${{ secrets.DOCKER_USERNAME }}/gpro-partie-prenante-service:latest ./gpao-tex-core/partie-prenante
#
#      - name: Push Docker images
#        run: |
#          docker push ${{ secrets.DOCKER_USERNAME }}/gpro-config-service:latest
#          docker push ${{ secrets.DOCKER_USERNAME }}/gpro-discovery-service:latest
#          docker push ${{ secrets.DOCKER_USERNAME }}/gpro-gateway-service:latest
#          docker push ${{ secrets.DOCKER_USERNAME }}/gpro-ordre-service:latest
#          docker push ${{ secrets.DOCKER_USERNAME }}/gpro-produit-service:latest
#          docker push ${{ secrets.DOCKER_USERNAME }}/gpro-production-service:latest
#          docker push ${{ secrets.DOCKER_USERNAME }}/gpro-partie-prenante-service:latest
#



name: Build & Deploy Microservices App

on:
  push:
    branches:
      - main
    paths:
      - 'gpao-tex-core/**'
      - '.github/workflows/**'

jobs:
  build-deploy:
    name: Build & Deploy Spring Boot Microservice App
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'corretto'
          java-version: 17

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Determine changed services
        id: changes
        run: |
          echo "Changed services:"
          if [ $(git rev-list --count HEAD) -gt 1 ]; then
            services=$(git diff --name-only HEAD^ HEAD | grep -Eo '^gpao-tex-core/[^/]+/' | sort | uniq)
          else
            echo "First commit or no previous commit to diff against."
            services="gpao-tex-core/*/"
          fi
          echo "$services"
          echo "::set-output name=services::$services"

      # Dynamic build and deploy steps based on detected changes
      - name: Build and Push Config Server
        if: contains(steps.changes.outputs.services, 'config-server')
        run: |
          cd gpao-tex-core/config-server
          ./mvnw clean test
          ./mvnw package -DskipTests
          docker build -t ${{ secrets.DOCKER_USERNAME }}/gpro-config-service:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/gpro-config-service:latest

      - name: Build and Push Discovery Service
        if: contains(steps.changes.outputs.services, 'discovery')
        run: |
          cd gpao-tex-core/discovery
          ./mvnw clean test
          ./mvnw package -DskipTests
          docker build -t ${{ secrets.DOCKER_USERNAME }}/gpro-discovery-service:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/gpro-discovery-service:latest

      - name: Build and Push Gateway
        if: contains(steps.changes.outputs.services, 'gateway')
        run: |
          cd gpao-tex-core/gateway
          ./mvnw clean test
          ./mvnw package -DskipTests
          docker build -t ${{ secrets.DOCKER_USERNAME }}/gpro-gateway-service:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/gpro-gateway-service:latest

      - name: Build and Push Ordre Service
        if: contains(steps.changes.outputs.services, 'ordre')
        run: |
          cd gpao-tex-core/ordre
          ./mvnw clean test
          ./mvnw package -DskipTests
          docker build -t ${{ secrets.DOCKER_USERNAME }}/gpro-ordre-service:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/gpro-ordre-service:latest

      - name: Build and Push Produit Service
        if: contains(steps.changes.outputs.services, 'produit')
        run: |
          cd gpao-tex-core/produit
          ./mvnw clean test
          ./mvnw package -DskipTests
          docker build -t ${{ secrets.DOCKER_USERNAME }}/gpro-produit-service:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/gpro-produit-service:latest

      - name: Build and Push Production Service
        if: contains(steps.changes.outputs.services, 'production')
        run: |
          cd gpao-tex-core/production
          ./mvnw clean test
          ./mvnw package -DskipTests
          docker build -t ${{ secrets.DOCKER_USERNAME }}/gpro-production-service:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/gpro-production-service:latest

      - name: Build and Push Partie Prenante Service
        if: contains(steps.changes.outputs.services, 'partie-prenante')
        run: |
          cd gpao-tex-core/partie-prenante
          ./mvnw clean test
          ./mvnw package -DskipTests
          docker build -t ${{ secrets.DOCKER_USERNAME }}/gpro-partie-prenante-service:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/gpro-partie-prenante-service:latest
