services:
  #postgreSQL
  postgres:
    container_name: db
    image: postgres:13-alpine
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: root
      PGDATA : /var/lib/postgresql/data
    volumes:
      - postgres:/var/lib/postgresql/data
    ports:
      - "5454:5432"
    networks:
      - microservice-net
    restart: unless-stopped

  #keyclock
  keycloak:
    container_name: keycloak-auth
    image: quay.io/keycloak/keycloak:24.0.2
    restart: always
    environment:
      KEYCLOAK_CREATE_ADMIN: true
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KEYCLOAK_DATABASE_HOST: postgres
      KEYCLOAK_DATABASE_PORT: 5433
      KEYCLOAK_DATABASE_USER: gpro_db
      KEYCLOAK_DATABASE_NAME: root
      KEYCLOAK_DATABASE_PASSWORD: root
    ports:
      - "8080:8080"
    command:
      - "start-dev"

  #zipkins
  zipkin:
    image: openzipkin/zipkin
    restart: always
    container_name: zipkin
    ports:
      - "9411:9411"
    networks:
      - microservice-net

  #GitlabRunner
  gitlab-runner:
    container_name: gitlab-runner
    restart: always
    build:
      context: .
      dockerfile: Dockerfile
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - "1200:1200"
      - "10000:10000"
      - "8668:8668"
      - "4444:4444"
      - "5656:5656"
      - "3434:3434"
      - "2323:2323"
      - "6767:6767"
    networks:
      - microservice-net

  #prometheus
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - microservice-net

  #grafana
  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - "3000:3000"
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - ./grafana:/etc/grafana/provisioning/datasources
    networks:
      - microservice-net

networks:
  microservice-net:
    driver: bridge

volumes:
  postgres:

